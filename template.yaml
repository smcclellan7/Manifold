AWSTemplateFormatVersion: "2010-09-09"
Description: A simple service that extracts a full name an zip code from a JSON and stores it in S3.
Resources:
  # TODO consider using more roles with narrower permissions.
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      Description: A single role with all permissions.
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "*"
                Resource: "*"

  NameAndZipBucket:
    Type: AWS::S3::Bucket

  NameAndZipBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NameAndZipBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowS3AccessToRootRole'
            Action:
              - 's3:*'
            Effect: 'Allow'
            Resource:
              - !GetAtt NameAndZipBucket.Arn
              - Fn::Join:
                  - ''
                  - - !GetAtt NameAndZipBucket.Arn
                    - '/*'
            Principal:
              AWS: !GetAtt RootRole.Arn

  ExtractAndStore:
    Type: AWS::Lambda::Function
    Properties:
      Description: Extracts the full name and zip code from a JSON input, and stores it in S3.
      Handler: extract_and_store.handle
      Role: !GetAtt RootRole.Arn
      Runtime: 'python3.8'
      Environment:
        Variables:
          BUCKET_NAME: !Ref NameAndZipBucket
      Code: manifold/

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: extract-and-store-api
      Description: "API gateway for the ExtractAndStore Lambda function."

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ExtractAndStore.Arn
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayRootMethod
    Properties:
      RestApiId: !Ref ApiGateway

  ExtractAndStorePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ExtractAndStore.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/

  NameAndZipAnalytics:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: "A Glue database for doing analytics on the data stored in the NameAndZipBucket"

  NameAndZipCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "NameAndZipCrawler"
      Role: !GetAtt RootRole.Arn
      DatabaseName: !Ref NameAndZipAnalytics
      Targets:
        S3Targets:
          - Path: !Ref NameAndZipBucket
      Schedule:
        # Run every minute
        ScheduleExpression: "cron(* * * * ? *)"
